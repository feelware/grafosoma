import ForceGraph2D from 'react-force-graph-2d'
import generateGraph from '../../utilities/generateGraph'
import { useEffect, useMemo, useRef, useState } from 'react'
import PropTypes from 'prop-types'
import { useMantineTheme } from '@mantine/core'
import { useViewportSize } from '@mantine/hooks'

export default function GraphView({ rawData }) {
  const graphRef = useRef(null)
  const mouseDown = useRef(false)
  const colors = useMantineTheme().colors
  const { height, width } = useViewportSize()

  /* Interactivity */

  useEffect(() => {
    function handleMouseDown() {
      mouseDown.current = true
    }
    function handleMouseUp() {
      mouseDown.current = false
    }
    function handleEscape(e) {
      if (e.key === 'Escape') {
        handleBackgroundClick()
      }
    }
    window.addEventListener('mousedown', handleMouseDown, true)
    window.addEventListener('mouseup', handleMouseUp, true)
    window.addEventListener('keydown', handleEscape, true)
    return () => {
      window.removeEventListener('mousedown', handleMouseDown, true)
      window.removeEventListener('mouseup', handleMouseUp, true)
      window.removeEventListener('keydown', handleEscape, true)
    }
  }, [])

  const data = useMemo(() => {
    const gData = generateGraph(rawData, 'name')

    gData.links.forEach((link) => {
      const a = gData.nodes[link.source]
      const b = gData.nodes[link.target]
      !a.neighbors && (a.neighbors = [])
      !b.neighbors && (b.neighbors = [])
      a.neighbors.push(b)
      b.neighbors.push(a)

      !a.links && (a.links = [])
      !b.links && (b.links = [])
      a.links.push(link)
      b.links.push(link)
    })

    return gData
  }, [rawData])

  const [hoveredNodes, setHoveredNodes] = useState(new Set())
  const [hoveredLinks, setHoveredLinks] = useState(new Set())
  const [clickedNodes, setClickedNodes] = useState(new Set())
  const [clickedLinks, setClickedLinks] = useState(new Set())
  const [focusMode, setFocusMode] = useState(false)
  const setHoverNode = useState(null)[1]

  const updateHovered = () => {
    setHoveredNodes(hoveredNodes)
    setHoveredLinks(hoveredLinks)
  }
  const updateClicked = () => {
    setClickedNodes(clickedNodes)
    setClickedLinks(clickedLinks)
  }

  const addNode = (node, nodeSet, linkSet) => {
    if (node) {
      nodeSet.add(node)
      if (node.neighbors) {
        node.neighbors.forEach((neighbor) => nodeSet.add(neighbor))
      }
      if (node.links) {
        node.links.forEach((link) => linkSet.add(link))
      }
    }
  }

  const delNode = (node, nodeSet, linkSet) => {
    if (node) {
      nodeSet.delete(node)
      if (node.neighbors) {
        node.neighbors.forEach((neighbor) => nodeSet.delete(neighbor))
      }
      if (node.links) {
        node.links.forEach((link) => linkSet.delete(link))
      }
    }
  }

  const handleNodeHover = (node) => {
    if (!mouseDown.current) {
      hoveredNodes.clear()
      hoveredLinks.clear()
    }

    addNode(node, hoveredNodes, hoveredLinks)

    setHoverNode(node || null)
    updateHovered()
  }

  const handleNodeDrag = (node) => {
    addNode(node, hoveredNodes, hoveredLinks)
  }

  const handleNodeDragEnd = () => {
    hoveredNodes.clear()
    hoveredLinks.clear()
  }

  const handleNodeClick = (node) => {
    if (clickedNodes.size === 0) {
      setFocusMode(true)
    }
    if (clickedNodes.has(node)) {
      delNode(node, clickedNodes, clickedLinks)
      if (clickedNodes.size === 0) {
        setFocusMode(false)
      }
    } else {
      addNode(node, clickedNodes, clickedLinks)
    }
    updateClicked()
  }

  const handleBackgroundClick = () => {
    clickedNodes.clear()
    clickedLinks.clear()
    setFocusMode(false)
  }

  /* Autogenerated curves on node repeat */

  useEffect(() => {
    let sameNodesLinks = {}
    const curvatureMinMax = 0.25

    data.links.forEach((link) => {
      link.nodePairId =
        link.source <= link.target
          ? link.source + '_' + link.target
          : link.target + '_' + link.source
      let map = null
      if (link.source != link.target) {
        map = sameNodesLinks
      }
      if (!map[link.nodePairId]) {
        map[link.nodePairId] = []
      }
      map[link.nodePairId].push(link)
    })

    Object.keys(sameNodesLinks)
      .filter((nodePairId) => sameNodesLinks[nodePairId].length > 1)
      .forEach((nodePairId) => {
        let links = sameNodesLinks[nodePairId]
        let lastIndex = links.length - 1
        let lastLink = links[lastIndex]
        lastLink.curvature = curvatureMinMax
        let delta = (2 * curvatureMinMax) / lastIndex
        for (let i = 0; i < lastIndex; i++) {
          links[i].curvature = -curvatureMinMax + i * delta
          if (lastLink.source !== links[i].source) {
            links[i].curvature *= -1
          }
        }
      })
  }, [hoveredNodes])

  const setNodeColor = (node) => {
    if (hoveredNodes.has(node)) {
      return colors.main[0]
    }
    if (focusMode) {
      if (clickedNodes.has(node)) {
        return colors.dark[3]
      }
      return colors.dark[5]
    }
    return colors.dark[3]
  }

  const setLinkColor = (link) => {
    if (hoveredLinks.has(link)) {
      return colors.main[0]
    }
    if (focusMode) {
      if (clickedLinks.has(link)) {
        return colors.dark[3]
      }
      return colors.dark[5]
    }
    return colors.dark[3]
  }

  /* Zoom to fit on data change */

  useEffect(() => {
    setTimeout(() => {
      graphRef.current.zoomToFit(0, height / 10)
    }, 1)
  }, [height, width])

  return (
    <>
      <ForceGraph2D
        ref={graphRef}
        width={width}
        height={height}
        graphData={data}
        autoPauseRedraw={true}
        linkCurvature={'curvature'}
        backgroundColor={'#ffffff0'}
        nodeRelSize={3}
        nodeColor={setNodeColor}
        linkColor={setLinkColor}
        dagMode={'radialin'}
        dagLevelDistance={200}
        onNodeHover={handleNodeHover}
        onNodeDrag={handleNodeDrag}
        onNodeDragEnd={handleNodeDragEnd}
        onNodeClick={handleNodeClick}
        onBackgroundClick={handleBackgroundClick}
        onLinkClick={handleBackgroundClick}
        linkVisibility={(link) => hoveredLinks.has(link) || clickedLinks.has(link)}
      />
    </>
  )
}

GraphView.propTypes = {
  rawData: PropTypes.arrayOf(
    PropTypes.shape({
      name: PropTypes.string.isRequired,
      tags: PropTypes.arrayOf(PropTypes.string).isRequired
    })
  ).isRequired
}
